import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import getProducts from './getProducts';
import getStyle from './getStyle';

const initialState = {
    product: null,
    style: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const dataAsync = createAsyncThunk(
    'product/fetchData',
    async () => {
        const response = await getProducts();
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const styleAsync = createAsyncThunk(
    'style/fetchdata',
    async () => {
        const res = await getStyle();
        // The value we return becomes the `fulfilled` action payload
        return res.data;
    }
);

export const ProductSlice = createSlice({
    name: 'product',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        currentProduct: (state, action) => {
            state.product = action.payload;
        },
        currentStyle: (state, action) => {
            state.style = action.payload;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(styleAsync.fulfilled, (state, action) => {
                state.style = action.payload;
            })
            .addCase(dataAsync.fulfilled, (state, action) => {
                state.product = action.payload;
            })

    },
});

export const { currentProduct, currentStyle } = ProductSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProduct = (state) => state.product.value;
export const selectStyle = (state) => state.product.style;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default ProductSlice.reducer;
